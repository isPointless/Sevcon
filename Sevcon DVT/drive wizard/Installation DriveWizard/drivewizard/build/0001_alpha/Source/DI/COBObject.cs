/*******************************************************************************
(C) COPYRIGHT Sevcon 2004

Project Reference UK0139

FILE
	$Revision:1.11$
	$Version:$
	$Author:ak$
	$ProjectName:DriveWizard$ 

	$RevDate:09/07/2008 21:16:48$
	$ModDate:01/07/2008 22:49:48$

ORIGINAL AUTHOR
    Jude Wood

DESCRIPTION
	Defines the COBObject, VPDOObject and PDOMapping classes.

REFERENCES    

MODIFICATION HISTORY
    $Log:  68944: COBObject.cs 

   Rev 1.11    09/07/2008 21:16:48  ak
 XML attributes added so that monitoring files are saved and re-read correctly.


   Rev 1.10    05/12/2007 21:13:46  ak
 TC keywords added to source for version control.


*******************************************************************************/
using System;
using System.Xml.Serialization;  
using System.Collections;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace DriveWizard
{
	#region COBID priority selection
	/// <summary>
	/// When DW or the user selects a new COBID for a PDO, they should select a priority as 
	/// this affects the CANbus performance.  The lower the COBID, the higher the priority
	/// it is given on the CANbus.  Hence, it makes sense when selecting them to guide them
	/// in their choice.
	/// </summary>
	public enum COBIDPriority
	{
		/// <summary>CANbus COBID for a transmit PDO with a high priority (0x181 to 0x1ff)</summary>
		high,
		/// <summary>CANbus COBID for a transmit PDO with a medium high priority (0x281 to 0x2ff)</summary>
		mediumHigh,
		/// <summary>CANbus COBID for a transmit PDO with a medium low priority (0x381 to 0x3ff)</summary>
		mediumLow,
		/// <summary>CANbus COBID for a transmit PDO with a low priority (0x481 to 0x4ff)</summary>
		low,
		/// <summary>
		/// used as marker that DW has not yet determine th ecorrect priority for this COB - enables us to calculat priority as a one off unless it is changed
		/// </summary>
		unknown //do not use "invlaid" - dotnet will use"invlaid" as some sort of keyword
	};
	#endregion

	#region COBID message types on CANbus
	/// <summary>
	/// Differing CAN message types that could be generated by a node.  
	/// N.B. All CAN messages require unique COBIDs.
	/// </summary>
	public enum COBIDType
	{
		/// <summary>COBID message type is unknown</summary>
		Unknown,

		/// <summary>COBID message type is a SYNC message</summary>
		Sync,

		/// <summary>COBID message type is TIMESTAMP message</summary>
		TimeStamp,

		/// <summary>COBID message type is an EMCY message that supports inhibit time setting</summary>
		EmergencyWithInhibit,
		/// <summary>COBID message type is an EMCY message that does not support inhibit time setting</summary>
		EmergencyNoInhibit,

		/// <summary>COBID message type is a HEARTBEAT message</summary>
		ProducerHeartBeat,

		/// <summary>COBID message type is SDO server message</summary>
		SDOServer,

		/// <summary>COBID message type is SDO client message</summary>
		SDOClient,

		/// <summary>COBID message type is PDO message</summary>
		PDO
	};
	#endregion

	#region enumerations
	public enum IntPDOType {DIG_OPS, ALG_OPs, MOTOR, DIG_IPs,  ALG_IPs};
	public enum IFacePnls {SysPDOTx, SysPDORx, VPDOTx, VPDORx};
	public enum preFillPDOsODIndex{TractionLeft = 0xFF0, TractionRight = 0xFF1, Pump = 0xFF2, PowerSteer = 0xFF3};
	#endregion enumerations
	/// <summary>
	/// Summary description for SystemCOBS.
	/// </summary>
	public class COBObject
	{
		public COBObject()
		{
			receiveNodes = new ArrayList();
			transmitNodes = new ArrayList();
		}

		#region COBID
		//theoritically unique number - low vlaues giv ehigh priority
        [XmlIgnore]
		private int _COBID = 0;
        [XmlAttribute]
		public int COBID
		{
			get
			{
				return _COBID;
			}
			set
			{
				_COBID = value;
			}
		}

		//this is the COBID that the user would like to this COB to use from now on - used in PDO set up and monitoring - change priority
        [XmlIgnore]
		private int _requestedCOBID = 0;
        [XmlAttribute]
		public int requestedCOBID
		{
			get
			{
				if(_requestedCOBID == 0)  //not beedn set yet
				{
					_requestedCOBID = this._COBID;
				}
				return _requestedCOBID;
			}
			set
			{
				this._priority = COBIDPriority.unknown; //force it to be re-evaluated
				_requestedCOBID = value;
			}
		}
		#endregion COBID

		/// <summary>
		/// 
		/// </summary>
        [XmlAttribute]
		public bool	createdForCalibratedGraphing = false;

		/// <summary>
		/// ArrayList contianing the mapping information and node ID of each device configured to receive this COB
		/// </summary>
        [XmlArray("receiveNodes"), XmlArrayItem("receiveNode", typeof(COBObject.PDOMapData))]
		public ArrayList receiveNodes;
		/// <summary>
		/// ArrayList of mapping info and node ID of each Tx device for this COB >1 is error condition
		/// </summary>
		//In theory if we have two nodes transmitting the same COBID then each could have seperate event times etc
		//however this is error condition - so we just need to inform user which nodes are up to no good
		//so we just keep one copy of event times etc per instance of COBObject
		///<summary>sized array holding all node IDs which tx this COBID</summary>
        [XmlArray("transmitNodes"), XmlArrayItem("transmitNode", typeof(COBObject.PDOMapData))]
        public ArrayList transmitNodes;		
		
		#region Tx Type value and flags
		///<summary>Tx every SyncTime</summary>
		[XmlIgnore]
        private int _SyncTime = 1;  //used to bind the sync time user control to
		///<summary>Cycliv Sync Types, Tx every SyncTime</summary>
		[XmlAttribute]
        public int SyncTime
		{
			get
			{
				return _SyncTime;
			}
			set
			{
				_SyncTime = value;
				if(this.SyncCyclic == true)
				{
					this._TxType = value;
				}
			}
		}
        [XmlIgnore]
		private int _TxType = 256;
        [XmlAttribute]
		public int TxType
		{
			get
			{
				return _TxType;
			}
			set
			{  //reference Table 56 in CiA main spec
				_TxType = value;
				if(_TxType == 0)
				{ 
					#region Synchronous Acylic
					this._SyncAcylic = true;
					this._SyncCyclic = false;
					this._SyncRTR = false;
					this._AsynchNormal = false;
					this._AsyncRTR = false;
					this._InvalidTxType = false;
					#endregion Synchronous Acylic
				}
				else if(( _TxType >0 ) && (_TxType <=240))
				{ 
					#region Synchronous cyclic
					_SyncTime = value;  //databound to the Sync time NUD control
					this._SyncAcylic = false;
					this._SyncCyclic = true;
					this._SyncRTR = false;
					this._AsynchNormal = false;
					this._AsyncRTR = false;
					this._InvalidTxType = false;
					#endregion Synchronous cyclic
				}
				else if((_TxType >=241) && (_TxType <=251))
				{	
					#region reserved - error condition
					this._SyncAcylic = false;
					this._SyncCyclic = false;
					this._SyncRTR = false;
					this._AsynchNormal = false;
					this._AsyncRTR = false;
					this._InvalidTxType = true;
					#endregion reserved - error condition
				}
				else if (_TxType == 252)
				{
					#region synchronous RTR
					this._SyncAcylic = false;
					this._SyncCyclic = false;
					this._SyncRTR = true;
					this._AsynchNormal = false;
					this._AsyncRTR = false;
					this._InvalidTxType = false;
					#endregion sysnchionous RTR
				}
				else if(_TxType == 253)
				{
					#region Asynchronous RTR
					this._SyncAcylic = false;
					this._SyncCyclic = false;
					this._SyncRTR = false;
					this._AsynchNormal = false;
					this._AsyncRTR = true;
					this._InvalidTxType = false;
					#endregion Asysnchionous RTR
				}
				else if((_TxType == 254) || (_TxType == 255)) 
				{ 
					#region Asynchronous normal
					this._SyncAcylic = false;
					this._SyncCyclic = false;
					this._SyncRTR = false;
					this._AsynchNormal = true;
					this._AsyncRTR = false;
					this._InvalidTxType = false;
					#endregion Asynchronous normal
				}
				else// non-PDO or reserved
				{
					this._SyncAcylic = false;
					this._SyncCyclic = false;
					this._SyncRTR = false;
					this._AsynchNormal = false;
					this._AsyncRTR = false;
					this._InvalidTxType = false;
					if(this.messageType == COBIDType.EmergencyWithInhibit)
					{
						this._AsynchNormal = true;  //force inhibit time ot be displayed
					}
				}
			}
		}
		#region boolean Tx tpye flags used to databind to Radio buttons on form
		#region Synchronous Tx Types
        [XmlIgnore]
		private bool _SyncCyclic = true; //set to cyclic by default
        [XmlAttribute]
		public bool SyncCyclic
		{
			get
			{
				return _SyncCyclic;  //cyclic
			}
		}
        [XmlIgnore]
		private bool _SyncRTR = true; //set to cyclic by default
        [XmlAttribute]
		public bool SyncRTR
		{
			get
			{
				return _SyncRTR;  //cyclic
			}
		}
        [XmlIgnore]
		private bool _SyncAcylic = false;
        [XmlAttribute]
		public bool SyncAcylic
		{
			get
			{
				return _SyncAcylic;  //
			}
		}
		#endregion Synchronous Tx Types
		#region Asynchronous Tx types
        [XmlIgnore]
		private bool _AsyncRTR = true; //set to cyclic by default
        [XmlAttribute]
		public bool AsyncRTR
		{
			get
			{
				return _AsyncRTR;  //cyclic
			}
		}
        [XmlIgnore]
		private bool _AsynchNormal = false;
        [XmlAttribute]
		public bool AsynchNormal
		{
			get
			{
				return _AsynchNormal;
			}
		}

		#endregion Asynchronous Tx types
		#region Invalid (Reserved) tx Types
        [XmlIgnore]
		private bool _InvalidTxType = false;
        [XmlAttribute]
        public bool InvalidTxType
		{
			get
			{
				return _InvalidTxType;  //cyclic
			}
		}
		#endregion Invalid (Reserved) tx Types
		#endregion boolean Tx tpye flags used to databind to Radio buttons on form
		#endregion Tx Type value and flags
		#region inhibit time
		///<summary>inhibit time for transmission (if asynchronous)</summary>
		[XmlIgnore]
        private int _inhibitTime = 0; //databound to NUD control on form
        [XmlAttribute]
        public int inhibitTime
		{
			get
			{
				return _inhibitTime;
			}
			set
			{
				_inhibitTime = value;
			}
		}

		#endregion inhibit time

		#region event time
		///<summary>event time for transmission</summary>
		[XmlIgnore]
        private int _eventTime = 0;
        [XmlAttribute]
        public int eventTime
		{
			get
			{
				return _eventTime;
			}
			set
			{
				_eventTime = value;
			}
		}

#endregion event time
		///<summary>message type of this COBID (needed by GUI)</summary>
		[XmlAttribute]
        public COBIDType messageType = COBIDType.Unknown;

		#region COB name
        [XmlIgnore]
		private string _name = "Unknown";
        [XmlAttribute]
		public string name
		{
			get
			{
				return _name;
			}
			set
			{
				_name = value;
			}
		}
		#endregion COB name

		#region priority
        [XmlIgnore]
		private COBIDPriority _priority = COBIDPriority.unknown;
        [XmlAttribute]
		public COBIDPriority priority
		{
			get
			{
				if(_priority == COBIDPriority.unknown)
				{
					//use _requestedCOBID here this is the DirveWIzar dcopy of the _COBID (
					//the pukka currnet value on CANnodes which we use when 
					//acutally submitting hcanges to devices)
					if(this.requestedCOBID >= 0x481)
					{
						_priority = COBIDPriority.low;
					}
					else if((this.requestedCOBID >= 0x381) && (this.requestedCOBID<=0x3ff))
					{
						_priority = COBIDPriority.mediumLow;
					}
					else if ((this.requestedCOBID >= 0x281) && (this.requestedCOBID<=0x2ff))
					{
						_priority = COBIDPriority.mediumHigh;
					}
					else if (this.requestedCOBID<=0x1ff)
					{
						_priority = COBIDPriority.high;
					}	
					else
					{
						_priority = COBIDPriority.unknown;
					}
				}
				return _priority;
			}
		}

		#endregion priority
        [XmlIgnore]
		public ArrayList assocDigIPs = new ArrayList();
        [XmlIgnore]
		public ArrayList assocAlgIPs = new ArrayList();
        [XmlIgnore]
		public ArrayList assocMotor = new ArrayList();
        [XmlIgnore]
		public ArrayList assocDigOPs = new ArrayList();
        [XmlIgnore]
		public ArrayList assocAlgOPs = new ArrayList();
		#region GUI related fields/properties
        [XmlIgnore]
		public ArrayList screenRoutes = new ArrayList();  //stroes the routing in screen co-ordinates
		public class screenRoutePoints
		{
			public Rectangle startRect, midRect, endRect;
			/// <summary>
			/// mark the poins at which we apply a knee bend in the line
			/// </summary>
			public int TxNodeScreenIndex = -1, RxNodeScreenIndex = -1;  //deliberate out of range
			public int TxNodemapODIndex = 0, RxNodemapODIndex = 0; //needed - it is possible for one node to Tx/Rx twice using different IODItndexes
			public screenRoutePoints()  //these rotes should be relatve to a control - this will dix any scrolling issues
			{
			}
		}
		#endregion GUI related fields/properties
		#region Mapping information for this COB - relevant to PDOs only
		public class PDOMapData
		{
			public PDOMapData()
			{
				SPDOMaps = new ArrayList();
			}
            [XmlAttribute]
			public int nodeID = 0;
            [XmlArray("SPDOMaps"), XmlArrayItem("SPDOMap", typeof(PDOMapping))]
			public ArrayList SPDOMaps;
            [XmlAttribute]
			public int mapODIndex; //the location of this set of mappings - minus 0x200 to get the corresponding COB deifnition - is zero for non pdo types
		}
		#endregion Mapping information for this COB - relevant to PDOs only
	}
	public class VPDOObject
	{
		public VPDOObject()
		{
			this.algIPMaps = new ArrayList();
			this.algOPMaps = new ArrayList();
			this.digIPMaps = new ArrayList();
			this.digOPMaps = new ArrayList();
			this.MotorMaps = new ArrayList();
		}
		public ArrayList digIPMaps;
		public ArrayList digOPMaps;
		public ArrayList algIPMaps;
		public ArrayList algOPMaps;
		public ArrayList MotorMaps;
		public int numEnabledDigIPMaps = 0, numEnabledDigOPMaps = 0, numEnabledAlgIPMaps = 0, numEnabledAlgOPMaps = 0, numEnabledMotorMaps = 0;
	}
	public class PDOMapping 
	{
        public PDOMapping()
        {
            _mapName = "";
            _mapValue = 0;
        }
		public PDOMapping(long passedMapValue, string passedMapName)
		{
			_mapName = passedMapName;
			_mapValue = passedMapValue;
		}
        [XmlIgnore]
		private long _mapValue = 0;
        [XmlAttribute]
		public long mapValue
		{
			get
			{
				return _mapValue;
			}
			set
			{
				_mapValue = value;
			}
		}
        [XmlIgnore]
		private string _mapName = "";
        [XmlAttribute]
		public string mapName
		{
			get
			{
				return _mapName;
			}
			set
			{
				_mapName = value;
			}
		}
	}
}
